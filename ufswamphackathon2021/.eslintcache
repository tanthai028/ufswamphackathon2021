[{"/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/index.js":"1","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/App.js":"2","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Home/Home.js":"3","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/Tutorials.js":"4","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Interest/Interest.js":"5","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Game/Game.js":"6","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Budgeting/Budgeting.js":"7","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/components/Header/Header.js":"8","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/bank/Bank.js":"9"},{"size":433,"mtime":1612052919026,"results":"10","hashOfConfig":"11"},{"size":1020,"mtime":1612052919019,"results":"12","hashOfConfig":"11"},{"size":266,"mtime":1612052919029,"results":"13","hashOfConfig":"11"},{"size":1036,"mtime":1612058459006,"results":"14","hashOfConfig":"11"},{"size":1981,"mtime":1612052919030,"results":"15","hashOfConfig":"11"},{"size":1077,"mtime":1612053652867,"results":"16","hashOfConfig":"11"},{"size":11174,"mtime":1612057316140,"results":"17","hashOfConfig":"11"},{"size":506,"mtime":1612052919026,"results":"18","hashOfConfig":"11"},{"size":883,"mtime":1612054229604,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"vchvkr",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/index.js",[],["44","45"],"/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/App.js",["46","47","48"],"\nimport React from \"react\";\nimport {Nav} from 'react-bootstrap'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Home from './pages/Home/Home.js';\nimport Interest from './pages/Interest/Interest.js';\nimport Tutorials from './pages/Tutorials/Tutorials.js';\nimport Budgeting from \"./pages/Budgeting/Budgeting.js\";\nimport Game from \"./pages/Game/Game.js\";\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">      \n        <Header/>\n          <Switch>\n            <Route exact path=\"/Home\" component={Home} />\n            <Route exact path=\"/Interest\" component={Interest} />\n            <Route exact path=\"/Budgeting\" component={Budgeting} />\n            <Route exact path=\"/Tutorials\" component={Tutorials} />\n            <Route exact path=\"/Game\" component={Game} />\n          </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Home/Home.js",["49"],"import React from 'react'\nimport './Home.css'\nimport { Link } from 'react-router-dom';\n\nexport default function Home() {\n    return (\n        <div className=\"homeDiv\">\n            <p>test</p>\n            <p>test</p>\n            <p>test</p> \n        </div>\n    )\n}\n\n\n","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/Tutorials.js",["50","51"],"/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Interest/Interest.js",["52"],"import React, { useState } from 'react';\nimport './Interest.css';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n\nexport default function Interest() {\n    const classes = useStyles();\n    const [annualIncome, setAnnualIncome] = useState('') \n    const [loanBalance, setLoanBalance] = useState('')\n    const [days, setDays] = useState('')\n    const [result, setResult] = useState(0)\n    \n    const calculate = (e) => {\n        e.preventDefault();\n        var decimal = annualIncome/100;\n        var annualInt = decimal/365;\n        var dailyInt = annualInt * loanBalance;\n        var monthlyInt = dailyInt * 30;\n        setResult(monthlyInt);\n\n    }\n\n\n    return (\n        \n        <div className=\"interestPage\">\n            <p className=\"title\">Interest</p>\n            <form onSubmit = {calculate}>\n                <p className=\"headings\">INPUT ANNUAL INTEREST</p>\n                <input placeholder=\"annual interest\" className=\"input\" onChange = {e => setAnnualIncome(e.target.value)} value = {annualIncome}  ></input>\n                <br></br>\n                <p className=\"headings\">INPUT LOAN BALANCE</p>\n                <input  placeholder=\"loan balance\" className=\"input\" onChange = {e => setLoanBalance(e.target.value)} value = {loanBalance}  ></input>\n                <br></br>\n                <p className=\"headings\">INPUT DAYS SINCE LAST PAYMENT</p>\n                <input  placeholder=\"days\" className=\"input\" onChange = {e => setDays(e.target.value)} value = {days}  ></input>\n                <br></br>\n                <br></br>\n                <Button  variant=\"outlined\" color=\"secondary\" className={classes.button}>Submit</Button>\n            </form>\n            <p2 className=\"info\">Interest occured since last payment: {result}</p2>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        fontSize: 12,\n        letterSpacing: 2,\n        margin: 12\n    }\n  }));\n\n\n","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Game/Game.js",[],"/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Budgeting/Budgeting.js",["53","54","55","56","57","58"],"import React, { useState, useEffect } from 'react';\nimport './Budget.css';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { PieChart } from 'react-minimal-pie-chart';\nimport moment from 'moment';\nimport InputBase from '@material-ui/core/InputBase';\n\n\nexport default function Interest() {\n    const classes = useStyles();\n    const [totalBalance, setTotalBalance] = useState('');\n    const [displayBalance, setDisplayBalance] = useState(0);\n    const [name, setName] = useState('');\n    const [percentage, setPercentage] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [totalPercent, setTotalPercent] = useState(0);\n    const [notes, setNotes] = useState(\"\");\n    const [warning, setWarning] = useState('')\n    const [spent, setSpent] = useState('');\n    const [pickSpent, setPickSpent] = useState('');\n    const [dropdownList, setDropdownList] = useState([]);\n    const [pieChartData, setPieChartData] = useState([]);\n    var colors = ['#fad15f', '#f043da', '#82f4ff', '#6CFF60', '#FFBA85'];\n    const [colorCount, setColorCount] = useState(0);\n    const [isSpentSubmitted, setIsSpentComitted] = useState(false);\n    const [date, setDate] = useState('');\n    const [history, setHistory] = useState([]);\n    \n\n    useEffect(() => { \n        setDate(moment().format(\"MMMM DD, Y\"));\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setDisplayBalance(totalBalance);\n\n    }\n\n    // const handleChoice = (event) => {\n    //     setPickSpent(event.target.value);\n    //   };\n\n    const handleCategories = (e) => {\n        e.preventDefault();\n        var calcAmount = totalBalance * (percentage/100);\n        // var newBalance = totalBalance - calcAmount;\n        // setTotalBalance(newBalance);\n        var currentPercent = totalPercent + percentage;\n        if(currentPercent <= 100) {\n            setTotalPercent(currentPercent);\n            setCategories(oldList => [...oldList, {name: name, percentage: percentage, catBalance: calcAmount, color: colors[colorCount]}]);\n            setPieChartData(oldList => [...oldList, {title: name, value: percentage, color: colors[colorCount]}]);\n            setDropdownList(oldList => [...oldList, name]);\n            var count = colorCount + 1;\n            setColorCount(count);\n        } else {\n            setWarning(\"Check Value or 100% Reached.\");\n        }\n    }\n\n      const handleSpent = (e) => {\n        setIsSpentComitted(true);\n    }\n\n\n    useEffect(() => {\n        if (isSpentSubmitted) {\n            Object.keys(categories).map(function(key,index) {\n                if(pickSpent == categories[key].name && categories[key].catBalance - spent >= 0) {\n                    categories[key].catBalance  = categories[key].catBalance - spent;\n    \n                    setHistory(list => [...list, {name: categories[key].name, note: notes, spent: spent, date: date}]);\n                    console.log(history);\n                    console.log(notes);\n                }\n            setIsSpentComitted(false);\n           })\n\n        }\n    }, [isSpentSubmitted]);\n\n\n\n    //object for \n\n    return (\n        <div className=\"budget\">\n        <div className=\"topText\">\n            <p className=\"title\">Budgeting</p>\n            <p className=\"date\">{date}</p>\n        </div>\n        <div className=\"topContainer\">\n         <div className=\"formArea\">\n                <form className=\"form\" onSubmit={handleSubmit}>\n                    <p className=\"headings\">SET TOTAL MONTHLY BALANCE</p>\n                    <div className=\"\">\n                        <input className=\"input\" placeholder=\"amount\" \n                            onChange={e => setTotalBalance(parseInt(e.target.value))} value={totalBalance}>\n                        </input>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.button} \n                            onClick={handleSubmit}>Submit\n                        </Button>\n                    </div>\n                \n                </form>\n                <form className=\"form\" onSubmit={handleCategories}>\n                    <p className=\"headings\">ADD CATEGORIES</p>\n                    <div className=\"catField\">\n                        <input className=\"input\" placeholder=\"category\" \n                            onChange={cat => setName(cat.target.value)} value={name}>\n                        </input>\n                        <input className=\"input\" placeholder=\"percentage\" \n                            onChange={per => setPercentage(parseInt(per.target.value))} value={percentage}>\n                        </input>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonAdd} \n                            onClick={handleCategories}>Add\n                        </Button>\n                    </div>\n                </form>\n                <form className=\"form\" onSubmit={handleSpent}>\n                    {/* <Dropdown className=\"test\" options={dropdownList} onChange={e => setPickSpent(e)} placeholder=\"Select an option\"/> */}\n                    <div className={classes.root}>\n                        <p className=\"headings\">SPENT</p>\n                        <input className=\"input\" placeholder=\"amount\" className=\"input\"\n                            onChange={num => setSpent(num.target.value)} value={spent}>\n                        </input>\n                        <Select\n                            labelId=\"demo-simple-select-helper-label\"\n                            id=\"demo-simple-select-helper\"\n                            input={<BootstrapInput />}\n                            className={classes.selectEmpty}\n                            value={pickSpent}\n                            MenuProps={{ classes: { paper: classes.select } }}\n                            inputProps={{\n                                classes: {\n                                    icon: classes.icon,\n                                },\n                            }}\n                            onChange={choice => setPickSpent(choice.target.value)}>\n                            <MenuItem value=\"\"> <em>Select</em> </MenuItem>\n                            {categories.map((catItem, index) =>\n                                <MenuItem value={catItem.name}>{catItem.name}</MenuItem>\n                            )}\n                        </Select>\n                    </div>\n                    <div className=\"notesContainer\">\n                        <textarea \n                            className=\"noteInput\" \n                            placeholder=\"notes about spendings\" \n                            onChange={note => setNotes(note.target.value)} value={notes}>\n                        </textarea>\n                    </div>\n                    <div>\n                     <Button variant=\"outlined\" color=\"secondary\" className={classes.button} \n                            onClick={handleSpent}>Submit\n                        </Button>\n                    </div>\n                </form>\n            </div>\n             <div className=\"infoArea\">\n                    <p className=\"headings\">TOTAL BALANCES: ${displayBalance}</p>\n                    <div className=\"catInfo\">\n                        {categories.map((catItem, index) =>\n                            <div className=\"tagBox\" style={{backgroundColor: catItem.color}}><p>{catItem.name} | balance: ${catItem.catBalance} </p></div>\n                            \n                            //<p>Category: {catItem.name} | Amount: ${catItem.catBalance} | Percentage: {catItem.percentage}</p>\n                        )}\n                        <p className=\"warning\">{warning}</p>\n                    </div>\n             </div>\n        </div>\n        <div style={{ borderTop: \"0.5px solid #bdbdf0 \", marginLeft: 20, marginRight: 20, marginTop: 100, marginBottom: 50 }}></div>\n        <div className=\"bottomInfo\">\n        \n             <div className=\"pieChartContainer\">\n                 <p className=\"headings\">BUDGET CATEGORIES (%)</p>\n                 <div className=\"pieChart\">\n                    <PieChart\n                        radius={80}\n                        viewBoxSize={[300, 100]}\n                        center={[150, 10]}\n                        data={\n                            pieChartData \n                        }/>\n                 </div>\n               \n            </div>\n\n            <div className=\"spendingInfo\">\n                 <p className=\"headings\">HISTORY</p>\n                    <div className=\"spendingInfoObjects\">\n                        {history.map((info, index) =>\n                        <div className=\"spendingObject\">\n                            <p className=\"headings\">{info.date}</p>\n                            <p className=\"headings\">{info.name}</p>\n                            <p className=\"headings\">SPENT ${info.spent}</p>\n                            <p className=\"headings\">{info.note}</p>\n                        </div>\n                        \n                        )}\n                    </div>          \n            </div>\n        </div>                    \n            \n\n    \n\n            \n        </div>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        fontSize: 12,\n        letterSpacing: 2,\n        marginBottom: 10\n    },\n    buttonAdd: {\n        fontSize: 12,\n        letterSpacing: 2,\n        marginBottom: 10,\n        paddingLeft: 26,\n        paddingRight: 26\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120\n    },\n    selectEmpty: {\n        width: 160,\n        marginRight: 10,\n        marginLeft: 12,\n        fontSize: 15,\n        color: \"white\",\n        \"&:before\": {\n            borderColor: \"#8a2be2\",\n            //width: 200,\n        }, \n        '&:after': {\n            borderColor: \"#8a2be2\",\n        },\n    }, \n    select: {\n        \"& ul\": {\n            backgroundColor: \"#8a2be2\",\n        },\n        \"& li\": {\n            fontSize: 12,\n            color: 'white'\n        },\n    },\n    specialOutline: {\n        borderColor: 'red',\n        color: 'red'\n      },\n      title: {\n        fontSize: 20,\n        padding: 10,\n        letterSpacing: 3\n      },\n  }));\n\n  const BootstrapInput = withStyles((theme) => ({\n    root: {\n      'label + &': {\n        marginTop: theme.spacing(3),\n      },\n    },\n    input: {\n      borderRadius: 4,\n      position: 'relative',\n      backgroundColor: '#1a1e4d',\n      border: '1px solid #8a2be2',\n      fontSize: '15px',\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\n      // Use the system font instead of the default Roboto font.\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n      '&:focus': {\n        fontSize: '15px',\n        borderRadius: 4,\n        borderColor: '#8a2be2',\n      },\n    },\n  }))(InputBase);\n\n\n","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/components/Header/Header.js",["59","60"],"\nimport React, { useEffect, useState } from 'react';\nimport './Header.css';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n\treturn (\n\t  <div id = \"_Header\">\n\t\t  <Link to=\"/Home\" className = \"_Link\">Home</Link>\n\t\t  <Link to=\"/Interest\" className = \"_Link\">Interest</Link>\n\t\t  <Link to=\"/Budgeting\" className = \"_Link\">Budgeting</Link>\n\t\t  <Link to=\"/Tutorials\" className = \"_Link\">Tutorials</Link>\n\t\t  <Link to=\"/Game\" className = \"_Link\">Game</Link>\n\t  </div>\n\t)\n  }\n\nexport default Header;\n","/Users/matinamahasantipiya/Desktop/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/bank/Bank.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":3,"column":9,"nodeType":"67","messageId":"68","endLine":3,"endColumn":12},{"ruleId":"65","severity":1,"message":"69","line":4,"column":8,"nodeType":"67","messageId":"68","endLine":4,"endColumn":14},{"ruleId":"65","severity":1,"message":"70","line":16,"column":3,"nodeType":"67","messageId":"68","endLine":16,"endColumn":7},{"ruleId":"65","severity":1,"message":"70","line":3,"column":10,"nodeType":"67","messageId":"68","endLine":3,"endColumn":14},{"ruleId":"65","severity":1,"message":"71","line":4,"column":20,"nodeType":"67","messageId":"68","endLine":4,"endColumn":26},{"ruleId":"65","severity":1,"message":"72","line":5,"column":3,"nodeType":"67","messageId":"68","endLine":5,"endColumn":9},{"ruleId":"65","severity":1,"message":"73","line":4,"column":22,"nodeType":"67","messageId":"68","endLine":4,"endColumn":32},{"ruleId":"65","severity":1,"message":"74","line":24,"column":12,"nodeType":"67","messageId":"68","endLine":24,"endColumn":24},{"ruleId":"75","severity":1,"message":"76","line":33,"column":5,"nodeType":"67","endLine":33,"endColumn":14,"suggestions":"77"},{"ruleId":"78","severity":1,"message":"79","line":72,"column":41,"nodeType":"80","messageId":"81","endLine":72,"endColumn":49},{"ruleId":"82","severity":1,"message":"83","line":73,"column":30,"nodeType":"84","messageId":"85","endLine":73,"endColumn":32},{"ruleId":"75","severity":1,"message":"86","line":84,"column":8,"nodeType":"87","endLine":84,"endColumn":26,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":128,"column":71,"nodeType":"91","endLine":128,"endColumn":88},{"ruleId":"65","severity":1,"message":"92","line":2,"column":17,"nodeType":"67","messageId":"68","endLine":2,"endColumn":26},{"ruleId":"65","severity":1,"message":"93","line":2,"column":28,"nodeType":"67","messageId":"68","endLine":2,"endColumn":36},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Link' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'withStyles' is defined but never used.","'dropdownList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["96"],"array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'categories', 'date', 'history', 'notes', 'pickSpent', and 'spent'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setHistory' needs the current value of 'categories'.","ArrayExpression",["97"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Add dependencies array: []",{"range":"102","text":"103"},"Update the dependencies array to be: [categories, date, history, isSpentSubmitted, notes, pickSpent, spent]",{"range":"104","text":"105"},[1489,1489],", []",[3213,3231],"[categories, date, history, isSpentSubmitted, notes, pickSpent, spent]"]