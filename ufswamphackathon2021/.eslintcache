[{"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/index.js":"1","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/App.js":"2","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Interest/Interest.js":"3","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Home/Home.js":"4","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/How/How.js":"5","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/NotFound/NotFound.js":"6","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Budgeting/Budgeting.js":"7","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/components/Header/Header.js":"8","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Game/Game.js":"9"},{"size":433,"mtime":1612035779906,"results":"10","hashOfConfig":"11"},{"size":992,"mtime":1612037257540,"results":"12","hashOfConfig":"11"},{"size":1356,"mtime":1612037168124,"results":"13","hashOfConfig":"11"},{"size":339,"mtime":1612037396666,"results":"14","hashOfConfig":"11"},{"size":159,"mtime":1612035779907,"results":"15","hashOfConfig":"11"},{"size":86,"mtime":1612035779907,"results":"16","hashOfConfig":"11"},{"size":7637,"mtime":1612036435548,"results":"17","hashOfConfig":"11"},{"size":450,"mtime":1612037328989,"results":"18","hashOfConfig":"11"},{"size":1033,"mtime":1612037218408,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1nrz3bx",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/index.js",[],["40","41"],"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/App.js",["42","43","44"],"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Interest/Interest.js",[],"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Home/Home.js",[],"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/How/How.js",[],"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/NotFound/NotFound.js",[],"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Budgeting/Budgeting.js",["45","46","47","48","49"],"import React, { useState, useEffect } from 'react';\nimport './Budget.css';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { PieChart } from 'react-minimal-pie-chart';\nimport moment from 'moment';\n\n\nexport default function Interest() {\n    const classes = useStyles();\n    const [totalBalance, setTotalBalance] = useState('');\n    const [displayBalance, setDisplayBalance] = useState(0);\n    const [name, setName] = useState('');\n    const [percentage, setPercentage] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [totalPercent, setTotalPercent] = useState(0);\n    const [warning, setWarning] = useState('')\n    const [spent, setSpent] = useState('');\n    const [pickSpent, setPickSpent] = useState('');\n    const [dropdownList, setDropdownList] = useState([]);\n    const [pieChartData, setPieChartData] = useState([]);\n    var colors = ['#fad15f', '#f043da', '#82f4ff', '#6CFF60', '#FFBA85'];\n    const [colorCount, setColorCount] = useState(0);\n    const [isSpentSubmitted, setIsSpentComitted] = useState(false);\n    const [date, setDate] = useState('');\n    \n\n    useEffect(() => { \n        setDate(moment().format(\"MMMM DD, Y\"));\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setDisplayBalance(totalBalance);\n\n    }\n\n    // const handleChoice = (event) => {\n    //     setPickSpent(event.target.value);\n    //   };\n\n    const handleCategories = (e) => {\n        e.preventDefault();\n        var calcAmount = totalBalance * (percentage/100);\n        // var newBalance = totalBalance - calcAmount;\n        // setTotalBalance(newBalance);\n        var currentPercent = totalPercent + percentage;\n        if(currentPercent <= 100) {\n            setTotalPercent(currentPercent);\n            setCategories(oldList => [...oldList, {name: name, percentage: percentage, catBalance: calcAmount, color: colors[colorCount]}]);\n            setPieChartData(oldList => [...oldList, {title: name, value: percentage, color: colors[colorCount]}]);\n            setDropdownList(oldList => [...oldList, name]);\n            var count = colorCount + 1;\n            setColorCount(count);\n        } else {\n            setWarning(\"Check Value or 100% Reached.\");\n        }\n    }\n\n      const handleSpent = (e) => {\n        setIsSpentComitted(true);\n    }\n\n    useEffect(() => {\n        if (isSpentSubmitted) {\n            Object.keys(categories).map(function(key,index) {\n                if(pickSpent == categories[key].name && categories[key].catBalance - spent >= 0) {\n                    categories[key].catBalance  = categories[key].catBalance - spent;\n                    console.log(categories[key].catBalance);\n                    console.log(categories);\n                }\n            setIsSpentComitted(false);\n           })\n\n        }\n    }, [isSpentSubmitted]);\n\n\n\n\n    //object for \n\n    return (\n        <div className=\"budget\">\n        <div className=\"topText\">\n            <p className=\"title\">BUDGET PAGE</p>\n            <p className=\"date\">{date}</p>\n        </div>\n        <div className=\"topContainer\">\n         <div className=\"formArea\">\n                <form onSubmit={handleSubmit}>\n                    <p className=\"headings\">SET TOTAL MONTHLY BALANCE</p>\n                    <input className=\"input\" placeholder=\"amount\" onChange={e => setTotalBalance(parseInt(e.target.value))} value={totalBalance}></input>\n                    <Button variant=\"outlined\" color=\"secondary\" onClick={handleSubmit}>Submit</Button>\n                </form>\n                <form className=\"cat\" onSubmit={handleCategories}>\n                    <p className=\"headings\">ADD CATEGORIES</p>\n                    <input className=\"input\" placeholder=\"category name\" onChange={cat => setName(cat.target.value)} value={name}></input>\n                    <input className=\"input\" placeholder=\"percentage\" onChange={per => setPercentage(parseInt(per.target.value))} value={percentage}></input>\n                    <Button variant=\"outlined\" color=\"secondary\" onClick={handleCategories}>Submit</Button>\n                </form>\n                <form className=\"spending\" onSubmit={handleSpent}>\n                    {/* <Dropdown className=\"test\" options={dropdownList} onChange={e => setPickSpent(e)} placeholder=\"Select an option\"/> */}\n                    <div className={classes.root}>\n                        <p className=\"headings\">SPENT</p>\n                        <input className=\"input\" placeholder=\"amount\" onChange={num => setSpent(num.target.value)} value={spent}></input>\n                        <Select\n                            labelId=\"demo-simple-select-helper-label\"\n                            id=\"demo-simple-select-helper\"\n                            className={classes.selectEmpty}\n                            value={pickSpent}\n                            inputProps={{\n                                classes: {\n                                    icon: classes.icon,\n                                },\n                            }}\n                            onChange={choice => setPickSpent(choice.target.value)}\n                            >\n                            <MenuItem value=\"\">\n                                <em>Select</em>\n                            </MenuItem>\n                            {categories.map((catItem, index) =>\n                                <MenuItem value={catItem.name}>{catItem.name}</MenuItem>\n                            )}\n                        </Select>\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={handleSpent}>Submit</Button>\n                    </div>\n                </form>\n            </div>\n             <div className=\"infoArea\">\n                    <p className=\"headings\">TOTAL BALANCES: ${displayBalance}</p>\n                    <div className=\"catInfo\">\n                        {categories.map((catItem, index) =>\n                            <div className=\"tagBox\" style={{backgroundColor: catItem.color}}><p>{catItem.name} | balance: ${catItem.catBalance} </p></div>\n                            \n                            //<p>Category: {catItem.name} | Amount: ${catItem.catBalance} | Percentage: {catItem.percentage}</p>\n                        )}\n                        <p className=\"warning\">{warning}</p>\n                    </div>\n             </div>\n        </div>\n        \n\n            <div className=\"pieChart\">\n                <PieChart\n                    radius={25}\n                    viewBoxSize={[300, 100]}\n                    center={[150, 40]}\n                    data={\n                        pieChartData \n                    }/>\n            </div>\n\n    \n\n            \n        </div>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120\n    },\n    selectEmpty: {\n        width: 200,\n        marginRight: 10,\n        color: \"white\",\n        \"&:before\": {\n            borderColor: \"blueviolet\",\n            //width: 200,\n        }, \n        '&:after': {\n            borderColor: \"blueviolet\",\n        },\n        icon: {\n            fill: \"blueviolet\",\n        }\n    },\n    multilineColor:{\n        color:'red',\n    \n    },\n    specialOutline: {\n        borderColor: 'red',\n        color: 'red'\n      },\n      cardRoot: {\n        width: 300,\n        height: 300,\n        backgroundColor: '#8a2be2',\n        color: 'white'\n      },\n      title: {\n        fontSize: 20,\n        padding: 10,\n        letterSpacing: 3\n      },\n  }));\n\n\n","/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/components/Header/Header.js",["50","51"],"/Users/annale/Documents/ufswamphackathon2021/ufswamphackathon2021/src/pages/Game/Game.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":3,"column":9,"nodeType":"58","messageId":"59","endLine":3,"endColumn":12},{"ruleId":"56","severity":1,"message":"60","line":4,"column":8,"nodeType":"58","messageId":"59","endLine":4,"endColumn":14},{"ruleId":"56","severity":1,"message":"61","line":16,"column":3,"nodeType":"58","messageId":"59","endLine":16,"endColumn":7},{"ruleId":"56","severity":1,"message":"62","line":22,"column":12,"nodeType":"58","messageId":"59","endLine":22,"endColumn":24},{"ruleId":"63","severity":1,"message":"64","line":30,"column":5,"nodeType":"58","endLine":30,"endColumn":14,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":68,"column":41,"nodeType":"68","messageId":"69","endLine":68,"endColumn":49},{"ruleId":"70","severity":1,"message":"71","line":69,"column":30,"nodeType":"72","messageId":"73","endLine":69,"endColumn":32},{"ruleId":"63","severity":1,"message":"74","line":78,"column":8,"nodeType":"75","endLine":78,"endColumn":26,"suggestions":"76"},{"ruleId":"56","severity":1,"message":"77","line":2,"column":17,"nodeType":"58","messageId":"59","endLine":2,"endColumn":26},{"ruleId":"56","severity":1,"message":"78","line":2,"column":28,"nodeType":"58","messageId":"59","endLine":2,"endColumn":36},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Link' is defined but never used.","'dropdownList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["81"],"array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'categories', 'pickSpent', and 'spent'. Either include them or remove the dependency array.","ArrayExpression",["82"],"'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Add dependencies array: []",{"range":"87","text":"88"},"Update the dependencies array to be: [categories, isSpentSubmitted, pickSpent, spent]",{"range":"89","text":"90"},[1332,1332],", []",[2954,2972],"[categories, isSpentSubmitted, pickSpent, spent]"]