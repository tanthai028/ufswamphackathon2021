[{"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/index.js":"1","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/App.js":"2","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Budgeting/Budgeting.js":"3","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Home/Home.js":"4","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/Tutorials.js":"5","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Interest/Interest.js":"6","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Game/Game.js":"7","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/components/Header/Header.js":"8","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/bank/Bank.js":"9","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/taxes/Taxes.js":"10","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/bills_checks/Checks.js":"11","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/credit_debit/Credit.js":"12"},{"size":433,"mtime":1612072487319,"results":"13","hashOfConfig":"14"},{"size":1493,"mtime":1612072726085,"results":"15","hashOfConfig":"14"},{"size":11183,"mtime":1612072726087,"results":"16","hashOfConfig":"14"},{"size":266,"mtime":1612072487322,"results":"17","hashOfConfig":"14"},{"size":958,"mtime":1612072726091,"results":"18","hashOfConfig":"14"},{"size":1916,"mtime":1612072726090,"results":"19","hashOfConfig":"14"},{"size":14801,"mtime":1612072878710,"results":"20","hashOfConfig":"14"},{"size":506,"mtime":1612072487319,"results":"21","hashOfConfig":"14"},{"size":895,"mtime":1612072726091,"results":"22","hashOfConfig":"14"},{"size":885,"mtime":1612072487325,"results":"23","hashOfConfig":"14"},{"size":887,"mtime":1612072487324,"results":"24","hashOfConfig":"14"},{"size":887,"mtime":1612072487325,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"u14thy",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/index.js",[],["54","55"],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/App.js",["56","57","58"],"\nimport React from \"react\";\nimport {Nav} from 'react-bootstrap'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Home from './pages/Home/Home.js';\nimport Interest from './pages/Interest/Interest.js';\nimport Tutorials from './pages/Tutorials/Tutorials.js';\nimport Budgeting from \"./pages/Budgeting/Budgeting.js\";\nimport Bank from \"./pages/Tutorials/bank/Bank.js\";\nimport Checks from \"./pages/Tutorials/bills_checks/Checks.js\";\nimport Taxes from \"./pages/Tutorials/taxes/Taxes.js\";\nimport Credit from \"./pages/Tutorials/credit_debit/Credit.js\";\nimport Game from \"./pages/Game/Game.js\";\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">      \n        <Header/>\n          <Switch>\n            <Route exact path=\"/Home\" component={Home} />\n            <Route exact path=\"/Interest\" component={Interest} />\n            <Route exact path=\"/Budgeting\" component={Budgeting} />\n            <Route exact path=\"/Tutorials\" component={Tutorials} />\n            <Route exact path=\"/Game\" component={Game} />\n            <Route exact path=\"/Bank\" component={Bank} />\n            <Route exact path=\"/Checks\" component={Checks} />\n            <Route exact path=\"/Taxes\" component={Taxes} />\n            <Route exact path=\"/Credit\" component={Credit} />\n          </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Budgeting/Budgeting.js",["59","60","61","62","63","64"],"import React, { useState, useEffect } from 'react';\nimport './Budget.css';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport { PieChart } from 'react-minimal-pie-chart';\nimport moment from 'moment';\nimport InputBase from '@material-ui/core/InputBase';\n\n\nexport default function Interest() {\n    const classes = useStyles();\n    const [totalBalance, setTotalBalance] = useState('');\n    const [displayBalance, setDisplayBalance] = useState(0);\n    const [name, setName] = useState('');\n    const [percentage, setPercentage] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [totalPercent, setTotalPercent] = useState(0);\n    const [notes, setNotes] = useState(\"\");\n    const [warning, setWarning] = useState('')\n    const [spent, setSpent] = useState('');\n    const [pickSpent, setPickSpent] = useState('');\n    const [dropdownList, setDropdownList] = useState([]);\n    const [pieChartData, setPieChartData] = useState([]);\n    var colors = ['#fad15f', '#f043da', '#82f4ff', '#6CFF60', '#FFBA85', '#FF0E0E'];\n    const [colorCount, setColorCount] = useState(0);\n    const [isSpentSubmitted, setIsSpentComitted] = useState(false);\n    const [date, setDate] = useState('');\n    const [history, setHistory] = useState([]);\n    \n\n    useEffect(() => { \n        setDate(moment().format(\"MMMM DD, Y\"));\n    });\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setDisplayBalance(totalBalance);\n\n    }\n\n    // const handleChoice = (event) => {\n    //     setPickSpent(event.target.value);\n    //   };\n\n    const handleCategories = (e) => {\n        e.preventDefault();\n        var calcAmount = totalBalance * (percentage/100);\n        // var newBalance = totalBalance - calcAmount;\n        // setTotalBalance(newBalance);\n        var currentPercent = totalPercent + percentage;\n        if(currentPercent <= 100) {\n            setTotalPercent(currentPercent);\n            setCategories(oldList => [...oldList, {name: name, percentage: percentage, catBalance: calcAmount, color: colors[colorCount]}]);\n            setPieChartData(oldList => [...oldList, {title: name, value: percentage, color: colors[colorCount]}]);\n            setDropdownList(oldList => [...oldList, name]);\n            var count = colorCount + 1;\n            setColorCount(count);\n        } else {\n            setWarning(\"Check Value or 100% Reached.\");\n        }\n    }\n\n      const handleSpent = (e) => {\n        setIsSpentComitted(true);\n    }\n\n\n    useEffect(() => {\n        if (isSpentSubmitted) {\n            Object.keys(categories).map(function(key,index) {\n                if(pickSpent == categories[key].name && categories[key].catBalance - spent >= 0) {\n                    categories[key].catBalance  = categories[key].catBalance - spent;\n    \n                    setHistory(list => [...list, {name: categories[key].name, note: notes, spent: spent, date: date}]);\n                    console.log(history);\n                    console.log(notes);\n                }\n            setIsSpentComitted(false);\n           })\n\n        }\n    }, [isSpentSubmitted]);\n\n\n\n    //object for \n\n    return (\n        <div className=\"budget\">\n        <div className=\"topText\">\n            <p className=\"title\">Budgeting</p>\n            <p className=\"date\">{date}</p>\n        </div>\n        <div className=\"topContainer\">\n         <div className=\"formArea\">\n                <form className=\"form\" onSubmit={handleSubmit}>\n                    <p className=\"headings\">SET TOTAL MONTHLY BALANCE</p>\n                    <div>\n                        <input className=\"inputBalance\" placeholder=\"amount\" \n                            onChange={e => setTotalBalance(parseInt(e.target.value))} value={totalBalance}>\n                        </input>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.button} \n                            onClick={handleSubmit}>Submit\n                        </Button>\n                    </div>\n                \n                </form>\n                <form className=\"form\" onSubmit={handleCategories}>\n                    <p className=\"headings\">ADD CATEGORIES</p>\n                    <div className=\"catField\">\n                        <input className=\"inputBalance\" placeholder=\"category\" \n                            onChange={cat => setName(cat.target.value)} value={name}>\n                        </input>\n                        <input className=\"inputBalance\" placeholder=\"percentage\" \n                            onChange={per => setPercentage(parseInt(per.target.value))} value={percentage}>\n                        </input>\n                        <Button variant=\"outlined\" color=\"secondary\" className={classes.buttonAdd} \n                            onClick={handleCategories}>Add\n                        </Button>\n                    </div>\n                </form>\n                <form className=\"form\" onSubmit={handleSpent}>\n                    {/* <Dropdown className=\"test\" options={dropdownList} onChange={e => setPickSpent(e)} placeholder=\"Select an option\"/> */}\n                    <div className={classes.root}>\n                        <p className=\"headings\">SPENT</p>\n                        <input className=\"inputBalance\" placeholder=\"amount\" \n                            onChange={num => setSpent(num.target.value)} value={spent}>\n                        </input>\n                        <Select\n                            labelId=\"demo-simple-select-helper-label\"\n                            id=\"demo-simple-select-helper\"\n                            input={<BootstrapInput />}\n                            className={classes.selectEmpty}\n                            value={pickSpent}\n                            MenuProps={{ classes: { paper: classes.select } }}\n                            inputProps={{\n                                classes: {\n                                    icon: classes.icon,\n                                },\n                            }}\n                            onChange={choice => setPickSpent(choice.target.value)}>\n                            <MenuItem value=\"\"> <em>Select</em> </MenuItem>\n                            {categories.map((catItem, index) =>\n                                <MenuItem value={catItem.name}>{catItem.name}</MenuItem>\n                            )}\n                        </Select>\n                    </div>\n                    <div className=\"notesContainer\">\n                        <textarea \n                            className=\"noteInput\" \n                            placeholder=\"notes about spendings\" \n                            onChange={note => setNotes(note.target.value)} value={notes}>\n                        </textarea>\n                    </div>\n                    <div>\n                     <Button variant=\"outlined\" color=\"secondary\" className={classes.button} \n                            onClick={handleSpent}>Submit\n                        </Button>\n                    </div>\n                </form>\n            </div>\n             <div className=\"infoArea\">\n                    <p className=\"headings\">TOTAL BALANCES: ${displayBalance}</p>\n                    <div className=\"catInfo\">\n                        {categories.map((catItem, index) =>\n                            <div className=\"tagBox\" style={{backgroundColor: catItem.color}}><p>{catItem.name} | balance: ${catItem.catBalance} </p></div>\n                            \n                            //<p>Category: {catItem.name} | Amount: ${catItem.catBalance} | Percentage: {catItem.percentage}</p>\n                        )}\n                        <p className=\"warning\">{warning}</p>\n                    </div>\n             </div>\n        </div>\n        <div style={{ borderTop: \"0.5px solid #bdbdf0 \", marginLeft: 20, marginRight: 20, marginTop: 100, marginBottom: 50 }}></div>\n        <div className=\"bottomInfo\">\n        \n             <div className=\"pieChartContainer\">\n                 <p className=\"headings\">BUDGET CATEGORIES (%)</p>\n                 <div className=\"pieChart\">\n                    <PieChart\n                        radius={80}\n                        viewBoxSize={[300, 100]}\n                        center={[150, 10]}\n                        data={\n                            pieChartData \n                        }/>\n                 </div>\n               \n            </div>\n\n            <div className=\"spendingInfo\">\n                 <p className=\"headings\">HISTORY</p>\n                    <div className=\"spendingInfoObjects\">\n                        {history.map((info, index) =>\n                        <div className=\"spendingObject\">\n                            <p className=\"headings\">{info.date}</p>\n                            <p className=\"headings\">{info.name}</p>\n                            <p className=\"headings\">SPENT ${info.spent}</p>\n                            <p className=\"headings\">{info.note}</p>\n                        </div>\n                        \n                        )}\n                    </div>          \n            </div>\n        </div>                    \n            \n\n    \n\n            \n        </div>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        fontSize: 12,\n        letterSpacing: 2,\n        marginBottom: 10\n    },\n    buttonAdd: {\n        fontSize: 12,\n        letterSpacing: 2,\n        marginBottom: 10,\n        paddingLeft: 26,\n        paddingRight: 26\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120\n    },\n    selectEmpty: {\n        width: 160,\n        marginRight: 10,\n        marginLeft: 12,\n        fontSize: 15,\n        color: \"white\",\n        \"&:before\": {\n            borderColor: \"#562a73\",\n            //width: 200,\n        }, \n        '&:after': {\n            borderColor: \"#562a73\",\n        },\n    }, \n    select: {\n        \"& ul\": {\n            backgroundColor: \"#562a73\",\n        },\n        \"& li\": {\n            fontSize: 12,\n            color: 'white'\n        },\n    },\n    specialOutline: {\n        borderColor: 'red',\n        color: 'red'\n      },\n      title: {\n        fontSize: 20,\n        padding: 10,\n        letterSpacing: 3\n      },\n  }));\n\n  const BootstrapInput = withStyles((theme) => ({\n    root: {\n      'label + &': {\n        marginTop: theme.spacing(3),\n      },\n    },\n    input: {\n      borderRadius: 4,\n      position: 'relative',\n      backgroundColor: '#1a1e4d',\n      border: '1px solid #562a73',\n      fontSize: '15px',\n      transition: theme.transitions.create(['border-color', 'box-shadow']),\n      // Use the system font instead of the default Roboto font.\n      fontFamily: [\n        '-apple-system',\n        'BlinkMacSystemFont',\n        '\"Segoe UI\"',\n        'Roboto',\n        '\"Helvetica Neue\"',\n        'Arial',\n        'sans-serif',\n        '\"Apple Color Emoji\"',\n        '\"Segoe UI Emoji\"',\n        '\"Segoe UI Symbol\"',\n      ].join(','),\n      '&:focus': {\n        fontSize: '15px',\n        borderRadius: 4,\n        borderColor: '#562a73',\n      },\n    },\n  }))(InputBase);\n\n\n","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Home/Home.js",["65"],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/Tutorials.js",[],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Interest/Interest.js",["66"],"import React, { useState } from 'react';\nimport './Interest.css';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n\nexport default function Interest() {\n    const classes = useStyles();\n    const [annualIncome, setAnnualIncome] = useState(0) \n    const [loanBalance, setLoanBalance] = useState(0)\n    const [days, setDays] = useState(0)\n    const [result, setResult] = useState(0)\n    \n    const calculate = (e) => {\n        e.preventDefault();\n        var decimal = annualIncome/100;\n        var annualInt = decimal/365;\n        var dailyInt = annualInt * loanBalance;\n        var monthlyInt = dailyInt * 30;\n        setResult(monthlyInt);\n\n    }\n\n    return (\n        \n        <div className=\"interestPage\">\n        <p className=\"title\">Interest Page</p>\n        <form onSubmit = {calculate}>\n            <p className=\"headings\">INPUT ANNUAL INTEREST</p>\n            <input className=\"inputInterest\" onChange = {e => setAnnualIncome(e.target.value)} value = {annualIncome}  ></input>\n            <br></br>\n            <p className=\"headings\">INPUT LOAN BALANCE</p>\n            <input className=\"inputInterest\" onChange = {e => setLoanBalance(e.target.value)} value = {loanBalance}  ></input>\n            <br></br>\n            <p className=\"headings\">INPUT DAYS SINCE LAST PAYMENTS</p>\n            <input className=\"inputInterest\" onChange = {e => setDays(e.target.value)} value = {days}  ></input>\n            <br></br>\n            <br></br>\n            <Button variant=\"outlined\" color=\"secondary\" className={classes.button} \n                onClick={calculate}>Submit\n            </Button>\n        </form>\n        <p className=\"headings\">Interest occured since last payment: {result}</p>\n    </div>\n    )\n}\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        fontSize: 12,\n        letterSpacing: 2,\n        margin: 12\n    }\n  }));\n\n\n","/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Game/Game.js",["67","68","69","70","71","72","73","74","75","76"],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/components/Header/Header.js",["77","78"],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/bank/Bank.js",[],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/taxes/Taxes.js",[],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/bills_checks/Checks.js",[],"/Users/annale/Documents/GitHub/ufswamphackathon2021/ufswamphackathon2021/src/pages/Tutorials/credit_debit/Credit.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":3,"column":9,"nodeType":"85","messageId":"86","endLine":3,"endColumn":12},{"ruleId":"83","severity":1,"message":"87","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":14},{"ruleId":"83","severity":1,"message":"88","line":20,"column":3,"nodeType":"85","messageId":"86","endLine":20,"endColumn":7},{"ruleId":"83","severity":1,"message":"89","line":24,"column":12,"nodeType":"85","messageId":"86","endLine":24,"endColumn":24},{"ruleId":"90","severity":1,"message":"91","line":33,"column":5,"nodeType":"85","endLine":33,"endColumn":14,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":72,"column":41,"nodeType":"95","messageId":"96","endLine":72,"endColumn":49},{"ruleId":"97","severity":1,"message":"98","line":73,"column":30,"nodeType":"99","messageId":"100","endLine":73,"endColumn":32},{"ruleId":"90","severity":1,"message":"101","line":84,"column":8,"nodeType":"102","endLine":84,"endColumn":26,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":128,"column":71,"nodeType":"106","endLine":128,"endColumn":88},{"ruleId":"83","severity":1,"message":"88","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":14},{"ruleId":"83","severity":1,"message":"107","line":4,"column":22,"nodeType":"85","messageId":"86","endLine":4,"endColumn":32},{"ruleId":"83","severity":1,"message":"108","line":24,"column":11,"nodeType":"85","messageId":"86","endLine":24,"endColumn":20},{"ruleId":"109","severity":1,"message":"110","line":84,"column":25,"nodeType":"85","messageId":"111","endLine":84,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":85,"column":35,"nodeType":"85","messageId":"111","endLine":85,"endColumn":44},{"ruleId":"109","severity":1,"message":"110","line":113,"column":25,"nodeType":"85","messageId":"111","endLine":113,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":114,"column":35,"nodeType":"85","messageId":"111","endLine":114,"endColumn":44},{"ruleId":"109","severity":1,"message":"110","line":124,"column":25,"nodeType":"85","messageId":"111","endLine":124,"endColumn":34},{"ruleId":"109","severity":1,"message":"110","line":125,"column":35,"nodeType":"85","messageId":"111","endLine":125,"endColumn":44},{"ruleId":"112","severity":1,"message":"113","line":216,"column":9,"nodeType":"114","messageId":"115","endLine":219,"endColumn":10},{"ruleId":"116","severity":1,"message":"117","line":222,"column":13,"nodeType":"85","messageId":"118","endLine":222,"endColumn":18},{"ruleId":"112","severity":1,"message":"113","line":225,"column":9,"nodeType":"114","messageId":"115","endLine":233,"endColumn":10},{"ruleId":"83","severity":1,"message":"119","line":2,"column":17,"nodeType":"85","messageId":"86","endLine":2,"endColumn":26},{"ruleId":"83","severity":1,"message":"120","line":2,"column":28,"nodeType":"85","messageId":"86","endLine":2,"endColumn":36},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'Link' is defined but never used.","'dropdownList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setDate'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["123"],"array-callback-return","Array.prototype.map() expects a return value from function.","FunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'categories', 'date', 'history', 'notes', 'pickSpent', and 'spent'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setHistory' needs the current value of 'categories'.","ArrayExpression",["124"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'withStyles' is defined but never used.","'purchased' is assigned a value but never used.","no-use-before-define","'newBudget' was used before it was defined.","usedBeforeDefined","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-redeclare","'event' is already defined.","redeclared","'useEffect' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Add dependencies array: []",{"range":"129","text":"130"},"Update the dependencies array to be: [categories, date, history, isSpentSubmitted, notes, pickSpent, spent]",{"range":"131","text":"132"},[1489,1489],", []",[3213,3231],"[categories, date, history, isSpentSubmitted, notes, pickSpent, spent]"]